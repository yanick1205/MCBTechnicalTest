CREATE OR REPLACE PACKAGE BCM_MIGRATION AUTHID CURRENT_USER AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */
  
  PROCEDURE create_tables;
  PROCEDURE migrate_data;

END BCM_MIGRATION;
/


CREATE OR REPLACE PACKAGE BODY BCM_MIGRATION AS
  
    PROCEDURE create_tables IS
      v_counter number :=0;
      v_create varchar2(4000);
    BEGIN
      
    select count(*) into v_counter from all_tables WHERE TABLESPACE_NAME = 'EXAM' AND TABLE_NAME='BCM_SUPPLIER';
    if v_counter > 0 then          
      execute immediate 'drop table ' || 'BCM_SUPPLIER' || ' cascade constraints';        
    end if;
    
    v_create:= '
    CREATE TABLE BCM_SUPPLIER
    (
      SUPPLIER_REF NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
      SUPPLIER_NAME VARCHAR(100),
      SUPP_CONTACT_NAME VARCHAR(100),
      SUPP_ADDRESS VARCHAR(500),
      SUPP_CONTACT_NUMBER VARCHAR(30),
      SUPP_EMAIL VARCHAR(500),
      CONSTRAINT supplier_pk PRIMARY KEY (SUPPLIER_REF)
    )';
    execute immediate v_create;
    
    v_counter :=0;
    select count(*) into v_counter from all_tables WHERE TABLESPACE_NAME = 'EXAM' AND TABLE_NAME='BCM_INVOICE';
    if v_counter > 0 then          
      execute immediate 'drop table ' || 'BCM_INVOICE' || ' cascade constraints';        
    end if;
    v_create:='';
    v_create :='
                CREATE TABLE BCM_INVOICE
              (
                INVOICE_REF VARCHAR(15) not null,
                INVOICE_DESCRIPTION VARCHAR(1000),
                INVOICE_AMOUNT DECIMAL,
                INVOICE_DATE DATE,
                INVOICE_STATUS VARCHAR(10),
                INVOICE_HOLD_REASON VARCHAR(100),
                ORDER_REF VARCHAR2(30),
                LEGACY_INVOICE_REF VARCHAR(15),
                CONSTRAINT invoice_pk PRIMARY KEY (INVOICE_REF),
                CONSTRAINT fk_order
                FOREIGN KEY (ORDER_REF)
                REFERENCES BCM_ORDER(ORDER_REF)
              
              )';
    
    execute immediate v_create;
    
    v_counter :=0;
    select count(*) into v_counter from all_tables WHERE TABLESPACE_NAME = 'EXAM' AND TABLE_NAME='BCM_ORDER';
    if v_counter > 0 then          
      execute immediate 'drop table ' || 'BCM_ORDER' || ' cascade constraints';        
    end if;
    v_create:='';
    v_create:='CREATE TABLE BCM_ORDER 
                 (	
                  ORDER_REF 			VARCHAR2(30), 
                  ORDER_DATE     		DATE,
                  ORDER_TOTAL_AMOUNT	DECIMAL,
                  ORDER_DESCRIPTION  	VARCHAR(2000),
                  ORDER_STATUS		VARCHAR(10),
                  ORDER_LINE_AMOUNT   DECIMAL,
                  SUPPLIER_REF		NUMBER,
                  ORDER_REF_PARENT VARCHAR(30),
                  CONSTRAINT order_pk PRIMARY KEY (ORDER_REF),
                  CONSTRAINT fk_supplier
                  FOREIGN KEY (SUPPLIER_REF)
                  REFERENCES BCM_SUPPLIER(SUPPLIER_REF)                  
                 )';
    
      execute immediate v_create;
    
    END create_tables;
    
    PROCEDURE migrate_data IS    
    BEGIN
    
      INSERT INTO BCM_SUPPLIER(SUPP_CONTACT_NUMBER,SUPPLIER_NAME,SUPP_CONTACT_NAME,SUPP_ADDRESS,SUPP_EMAIL)
      SELECT DISTINCT TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(XXBCM_ORDER_MGT.SUPP_CONTACT_NUMBER,'S','5'),'.',''),'o','0'),'I','1'),' ','')),
              XXBCM_ORDER_MGT.SUPPLIER_NAME,
              XXBCM_ORDER_MGT.SUPP_CONTACT_NAME,
              XXBCM_ORDER_MGT.SUPP_ADDRESS,
              XXBCM_ORDER_MGT.SUPP_EMAIL
      FROM XXBCM_ORDER_MGT;
      
      commit;
      
      INSERT INTO BCM_ORDER(ORDER_REF,ORDER_DATE,ORDER_TOTAL_AMOUNT,ORDER_DESCRIPTION,ORDER_STATUS,ORDER_LINE_AMOUNT,SUPPLIER_REF,ORDER_REF_PARENT)
        SELECT  
        CASE LENGTH(ORDER_REF)
          WHEN 5 THEN ORDER_REF
          ELSE 
            -- re calculate sequence
            SUBSTR(ORDER_REF,1,5) || '.' || TO_CHAR((row_number() over ( partition by SUBSTR(ORDER_REF,1,5) order by ORDER_REF ))-1) 
          END  as computedOrderRef,
        
        CASE LENGTH(a.ORDER_DATE) 
          WHEN 11 THEN TO_DATE(a.ORDER_DATE,'DD-MON-YYYY')    
          ELSE TO_DATE(a.ORDER_DATE,'DD-MM-YYYY')
        END AS ORDERDT,
        
        CAST(REPLACE(REPLACE(REPLACE(REPLACE(a.ORDER_TOTAL_AMOUNT,'S','5'),',',''),'o','0'),'I','1') AS DECIMAL) as OrderTotAmt,
        a.ORDER_DESCRIPTION,
        a.ORDER_STATUS,
        
        CAST(REPLACE(REPLACE(REPLACE(REPLACE(a.ORDER_LINE_AMOUNT,'S','5'),',',''),'o','0'),'I','1') AS DECIMAL) as OrderLineAmt,
        s.SUPPLIER_REF,
        CASE LENGTH(ORDER_REF)
          WHEN 5 THEN NULL
          ELSE SUBSTR(ORDER_REF,1,5)
        END as ParentOrder      
      FROM 
      (
        SELECT * FROM XXBCM_ORDER_MGT a ORDER BY ORDER_REF,ORDER_DATE
      ) a
      -- left join appropriate for larger set of data where supplier name would have required cleansing
      LEFT JOIN BCM_SUPPLIER s
      ON s.SUPPLIER_NAME = a.SUPPLIER_NAME;
    
      commit;

      INSERT INTO BCM_INVOICE(INVOICE_REF,INVOICE_DESCRIPTION,INVOICE_AMOUNT,INVOICE_DATE,INVOICE_STATUS,INVOICE_HOLD_REASON,ORDER_REF,LEGACY_INVOICE_REF)
      SELECT  
                
      SUBSTR(INVOICE_REFERENCE,1,9) || '.' || TO_CHAR(row_number() over ( partition by SUBSTR(INVOICE_REFERENCE,1,9) order by INVOICE_REFERENCE )) as InvoiceRef,
      a.INVOICE_DESCRIPTION,                  
      CAST(REPLACE(REPLACE(REPLACE(REPLACE(a.INVOICE_AMOUNT,'S','5'),',',''),'o','0'),'I','1') AS DECIMAL) as InvoiceAmount,                  
      CASE LENGTH(a.INVOICE_DATE) 
            WHEN 11 THEN TO_DATE(a.INVOICE_DATE,'DD-MON-YYYY')    
            ELSE TO_DATE(a.INVOICE_DATE,'DD-MM-YYYY')
            END AS InvoiceDt,
       a.INVOICE_STATUS,
       a.INVOICE_HOLD_REASON,
       SUBSTR(a.ORDER_REF,1,5) as OrderRef,
       INVOICE_REFERENCE as LegacyInvoiceRef
       FROM 
        (
          SELECT * FROM XXBCM_ORDER_MGT a ORDER BY ORDER_REF,ORDER_DATE
        ) a
        -- left join appropriate for larger set of data where supplier name would have required cleansing
        LEFT JOIN BCM_SUPPLIER s
        ON s.SUPPLIER_NAME = a.SUPPLIER_NAME        
        WHERE a.INVOICE_REFERENCE IS NOT NULL;  
      
      
    
    END migrate_data;

END BCM_MIGRATION;
/
